#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

COPY_CHART_DIR=sleek_hook_cleaner_chart_backup

showHelp() {
    echo "Usage: ./sleekHookCleaner.sh CHART_PATH [--dry-run | --keep]
This scripts:
* Creates the manifests based on the chart and default values on '${COPY_CHART_DIR}'
* Search for appearances of 'helm.sh/hook'
* If its not a dry-run
  * Creates a backup of the original chart
  * Removes the templates that generated the manifest with a hook from the original files
  * Repackages the chart adding 'cs-no-hooks' suffix to the version

Flags:
  -d,   --dry-run       Perform dry-run execution
  -k,   --keep          Keep temp files
"
}

main(){
    CHART_PATH=$1

    IS_DRY_RUN=false
    KEEP_TEMP_DIR=false
    OUTPUT_TEMPLATES_DIR=sleek_hook_cleaner_templates
    KUBE_VERSION=1.27

    if [ ${2:-default} == '-d' ] || [ ${2:-default} == '--dry-run' ]; then
        IS_DRY_RUN=true
        echo "Dry run, not creating new chart. New templates created in ${OUTPUT_TEMPLATES_DIR} won't be removed"
    fi

    if [ ${2:-default} == '-k' ] || [ ${2:-default} == '--keep' ]; then
        KEEP_TEMP_DIR=true
    fi

    if [ -d $OUTPUT_TEMPLATES_DIR ]; then
        echo "Manifest directory already exists. Cleaning";
        rm -rf $OUTPUT_TEMPLATES_DIR
    fi

    echo "Creating template for $CHART_PATH and kubernetes version $KUBE_VERSION in $OUTPUT_TEMPLATES_DIR"
    helm template --output-dir $OUTPUT_TEMPLATES_DIR $CHART_PATH --kube-version $KUBE_VERSION > /dev/null 2>&1

    TO_DELETE=()
    while read -r line ; do
        TEMPLATE_SOURCE=$(sed -n '2p' $line)
        TEMPLATE_SOURCE=${TEMPLATE_SOURCE#"# Source: "}
        echo "Hook found in template '$line' generated by '$TEMPLATE_SOURCE'"
        TO_DELETE+=($TEMPLATE_SOURCE)
    done < <(grep -Ril 'helm.sh/hook' $OUTPUT_TEMPLATES_DIR)

    if [[ "${#TO_DELETE[@]}" -eq 0 ]];
    then
        echo "No hooks found, no changes required. Exiting"
        exit 0
    fi

    if [[ "$IS_DRY_RUN" = "true" ]];
    then
        echo "Dry run execution. Exiting"
        exit 0
    fi

    echo "Total templates to be deleted: ${#TO_DELETE[@]}"

    if [ -d $COPY_CHART_DIR ]; then
        echo "Chart copy directory already exists. Cleaning";
        rm -rf $COPY_CHART_DIR
    fi

    echo "Creating backup of $CHART_PATH in $COPY_CHART_DIR"
    cp -r $CHART_PATH $COPY_CHART_DIR
    for ORIGINAL_PATH in "${TO_DELETE[@]}";do
        rm -f $ORIGINAL_PATH
    done

    # Clean tpl files with hooks
    SEDOPTION=
    if [[ "$OSTYPE" == "darwin"* ]];
    then
      SEDOPTION="-i ''"
    fi
    grep -rl 'helm.sh/hook' $CHART_PATH --include \*.tpl || [[ $? == 1 ]] | xargs sed $SEDOPTION 's@helm.sh/hook@UNSUPPORTED_USE_OF_HELM_HOOKS@g'
    # repackage with new version
    COPY_VERSION=$(helm show chart $CHART_PATH |yq .version)-cs-no-hooks
    CHART_NAME=$(helm show chart $CHART_PATH |yq .name)
    echo "Chart without Helm hooks available in ${CHART_PATH}"
    echo $COPY_VERSION
    helm package $CHART_PATH --version $COPY_VERSION
    helm lint $CHART_NAME-$COPY_VERSION.tgz > /dev/null

    if [[ "$KEEP_TEMP_DIR" = "true" ]];
    then
        echo "Keeping temp directory: ''./${OUTPUT_TEMPLATES_DIR}/'"
        exit 0
    fi
    echo "Removing temp directories: './${OUTPUT_TEMPLATES_DIR}/'"
    rm -rf $OUTPUT_TEMPLATES_DIR
    exit 0
}

# Show help and error if the directory is no parameters
if [[ $# -eq 0 ]];
then
    showHelp "$@"
    exit 1
fi

# Show help
if [[ "${1-}" =~ ^-*h(elp)?$ ]];
then
    showHelp "$@"
    exit
fi

# Error if the directory is not found
if [[ ! -d "${1}" ]];
then
  echo "Directory ${1} does not exist"
  exit 1
fi

# Error if the directory doesn't look like a helm chart
if [ ! -f "${1}/Chart.yaml" ];
then
    echo "There is not Chart.yaml file in ${1}"
    exit 1
fi

main "$@"
